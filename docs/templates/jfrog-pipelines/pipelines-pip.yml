resources:
  - name: cron_trigger
    type: CronTrigger
    configuration:
      interval: "0 * * * *" # Run once an hour

  - name: frogbotGitRepo
    type: GitRepo
    configuration:
      gitProvider: gitIntegration
      path: "{{.jfrog-pipelines.sourceRepository}}"
      branches:
        include: ^{{gitBranch}}$
      cloneProtocol: https

pipelines:
  - name: Frogbot
    steps:
      - name: Frogbot_Scan
        type: Bash # For Windows runner: PowerShell
        configuration:
          integrations:
            - name: jfrogPlatform
            - name: gitIntegration
          inputResources:
            - name: cron_trigger
            - name: frogbotGitRepo
          runtime:
            type: image
            image:
              custom:
                name: python
                tag: latest
          environmentVariables:
            # [Mandatory if the two conditions below are met]
            # 1. The project uses yarn 2, NuGet or .NET Core to download its dependencies
            # 2. The `installCommand` variable isn't set in your frogbot-config.yml file.
            #
            # The command that installs the project dependencies (e.g "nuget restore")
            # JF_INSTALL_DEPS_CMD: ""

            # [Mandatory]
            # JFrog platform URL
            JF_URL: $int_jfrogPlatform_url

            # [Mandatory if JF_USER and JF_PASSWORD are not provided]
            # JFrog access token with 'read' permissions for Xray
            JF_ACCESS_TOKEN: $int_jfrogPlatform_accessToken

            # [Mandatory for Bitbucket]
            # Username of the git provider account
            JF_GIT_USERNAME: ""

            # [Mandatory]
            # Git provider access token with minimal permissions according to the relevant integration type.
            # Read more - https://www.jfrog.com/confluence/display/JFROG/Pipelines+Integrations
            JF_GIT_TOKEN: $int_gitIntegration_token

            # [Mandatory]
            # Name of your git provider: "bitbucketServer" or "github".
            JF_GIT_PROVIDER: ""

            # [Mandatory]
            # API endpoint to your git provider
            JF_GIT_API_ENDPOINT: $int_gitIntegration_url

            # [Mandatory]
            # Git provider project owner.
            JF_GIT_OWNER: ""

            # [Optional]
            # If the machine that runs Frogbot has no access to the internet, set the name of a remote repository
            # in Artifactory, which proxies https://releases.jfrog.io
            # The 'frogbot' executable and other tools it needs will be downloaded through this repository.
            # JF_RELEASES_REPO: ""

            ###########################################################################
            ##   If your project uses a 'frogbot-config.yml' file, you should define ##
            ##   the following variables inside the file, instead of here.           ##
            ###########################################################################

            # [Mandatory]
            # Git repository name
            JF_GIT_REPO: ""

            # [Mandatory]
            # Repository branch to scan
            JF_GIT_BASE_BRANCH: $res_frogbotGitRepo_gitRepoSourceDefaultBranch

            # [Optional]
            # JFrog project. Learn more about it here: https://www.jfrog.com/confluence/display/JFROG/Projects
            # JF_PROJECT: <project-key>

            # [Optional]
            # Frogbot will download the project dependencies if they're not cached locally. To download the
            # dependencies from a virtual repository in Artifactory, set the name of the repository. There's no
            # need to set this value, if it is set in the frogbot-config.yml file.
            # JF_DEPS_REPO: ""

            # [Optional, default: "."]
            # Relative path to the project in the git repository
            # JF_WORKING_DIR: path/to/project/dir

            # [Optional]
            # Xray Watches. Learn more about them here: https://www.jfrog.com/confluence/display/JFROG/Configuring+Xray+Watches
            # JF_WATCHES: <watch-1>,<watch-2>...<watch-n>

            # [Optional, default: "FALSE"]
            # Displays all existing vulnerabilities, including the ones that were added by the pull request.
            # JF_INCLUDE_ALL_VULNERABILITIES: "TRUE"

            # [Optional, default: "TRUE"]
            # Fails the Frogbot task if any security issue is found.
            # JF_FAIL: "FALSE"

            # [Optional]
            # Pip requirements.txt file path
            # JF_REQUIREMENTS_FILE: ""

            # [Optional]
            # Template for the branch name generated by Frogbot when creating pull requests with fixes.
            # The template must include ${BRANCH_NAME_HASH}, to ensure that the generated branch name is unique.
            # The template can optionally include the ${IMPACTED_PACKAGE} and ${FIX_VERSION} variables.
            # The template must be wrapped with "' to support special characters.
            # JF_BRANCH_NAME_TEMPLATE: "'frogbot-${IMPACTED_PACKAGE}-${BRANCH_NAME_HASH}'"

            # [Optional]
            # Template for the commit message generated by Frogbot when creating pull requests with fixes
            # The template can optionally include the ${IMPACTED_PACKAGE} and ${FIX_VERSION} variables.
            # The template must be wrapped with "' to support special characters.
            # JF_COMMIT_MESSAGE_TEMPLATE: "'Upgrade ${IMPACTED_PACKAGE} to ${FIX_VERSION}'"

            # [Optional]
            # Template for the pull request title generated by Frogbot when creating pull requests with fixes.
            # The template can optionally include the ${IMPACTED_PACKAGE} and ${FIX_VERSION} variables.
            # The template must be wrapped with "' to support special characters.
            # JF_PULL_REQUEST_TITLE_TEMPLATE: "'[üê∏ Frogbot] Upgrade ${IMPACTED_PACKAGE} to ${FIX_VERSION}'"

            # [Optional, Default: "FALSE"]
            # If TRUE, Frogbot creates a single pull request with all the fixes.
            # If FALSE, Frogbot creates a separate pull request for each fix.
            # JF_GIT_AGGREGATE_FIXES: "FALSE"

            # [Optional, Default: "FALSE"]
            # Handle vulnerabilities with fix versions only
            # JF_FIXABLE_ONLY: "TRUE"

            # [Optional]
            # Set the minimum severity for vulnerabilities that should be fixed and commented on in pull requests
            # The following values are accepted: Low, Medium, High or Critical
            # JF_MIN_SEVERITY: ""

            # [Optional, Default: eco-system+frogbot@jfrog.com]
            # Set the email of the commit author
            # JF_GIT_EMAIL_AUTHOR: ""

        execution:
          onExecute:
            - cd $res_frogbotGitRepo_resourcePath
            # For Linux/Mac runner:
            # For Linux/Mac runner:
            - |
              getFrogbotScriptPath=$( [[ -z "$JF_RELEASES_REPO" ]] && echo "https://releases.jfrog.io" || echo "${JF_URL}/artifactory/${JF_RELEASES_REPO}" )
              curl -fLg "$getFrogbotScriptPath/artifactory/frogbot/v2/[RELEASE]/getFrogbot.sh" | sh
              ./frogbot scan-pull-requests
              ./frogbot scan-and-fix-repos

            # For Windows runner:
            # - |
            #   if (-not $env:JF_RELEASES_REPO) {
            #       $getFrogbotScriptPath = "https://releases.jfrog.io"
            #   } else {
            #       $getFrogbotScriptPath = "$($env:JF_URL)/artifactory/$($env:JF_RELEASES_REPO)"
            #   }
            #
            #   $scriptUrl = "$($getFrogbotScriptPath)/artifactory/frogbot/v2/[RELEASE]/getFrogbot.sh"
            #   Invoke-Expression (Invoke-WebRequest -Uri $scriptUrl -UseBasicParsing).Content
            #   .\frogbot.exe scan-pull-requests
            #   .\frogbot.exe scan-and-fix-repos
